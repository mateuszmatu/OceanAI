defaults:
- data: zarr
- dataloader: native_grid
- diagnostics: evaluation
- hardware: example
- graph: multi_scale
- model: graphtransformer
- training: default
- _self_

dataloader:
  num_workers:
    training: 1
    validation: 1
    test: 1
    predict: 1
  batch_size:
    training: 1
    validation: 1
    test: 1
    predict: 1

  dataset: ${hardware.paths.data}/${hardware.files.dataset}

  limit_batches: 
    training: 10
    validation: 10
  training:
    start: 2024-01-01
    end: 2024-01-01
    dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/norkystv3_2024010100-2024010220.zarr
    frequency: 1
    #mask_from_dataset:
    #  dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/mask_2024010100-2024010320.zarr
    #  field: land_binary_mask_0 #[land_binary_mask_0, land_binary_mask_1, land_binary_mask_2, land_binary_mask_3,land_binary_mask_5, land_binary_mask_7, land_binary_mask_10, land_binary_mask_15, land_binary_mask_25, land_binary_mask_50, land_binary_mask_65, land_binary_mask_75, land_binary_mask_100, land_binary_mask_200, land_binary_mask_300]
    #drop: [temperature_1, temperature_2, temperature_3, temperature_5, temperature_7, temperature_10, temperature_15, temperature_25, temperature_50, temperature_65, temperature_75, temperature_100, temperature_200, temperature_300]
  validation:
    start: 2024-01-02
    end: 2024-01-02
    dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/norkystv3_2024010100-2024010220.zarr
    frequency: 1
    #mask_from_dataset:
    #  dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/mask_2024010100-2024010320.zarr
    #  field: land_binary_mask_0
    #drop: [temperature_1, temperature_2, temperature_3, temperature_5, temperature_7, temperature_10, temperature_15, temperature_25, temperature_50, temperature_65, temperature_75, temperature_100, temperature_200, temperature_300]
  test:
    start: 2024-01-01
    end: 2024-01-02
    dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/norkystv3_2024010100-2024010220.zarr
    frequency: 1
    #mask_from_dataset:
    #  dataset: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/mask_2024010100-2024010320.zarr
    #  field: land_binary_mask_0
    #drop: [temperature_1, temperature_2, temperature_3, temperature_5, temperature_7, temperature_10, temperature_15, temperature_25, temperature_50, temperature_65, temperature_75, temperature_100, temperature_200, temperature_300]

hardware:
  num_gpus_per_node: 1
  num_nodes: 1
  num_gpus_per_model: 1
  accelerator: auto
  paths:
    data: /lustre/storeB/project/fou/hi/foccus/mateuszm/OceanAI/datasets/
    output_base: /lustre/storeB/project/fou/hi/foccus/training-output/ 
    output: null #do not change this, it will be modified in code to be output_base + run_id.
    graph: /lustre/storeB/project/fou/hi/foccus/graphs/
  files:
    dataset: norkystv3_2024010100-2024010220.zarr
    graph: graph-2-12.pt
    warm_start: null #specific checkpoint to start from, defaults to last.ckpt

diagnostics:
  log:
    mlflow:
      enabled: False
      offline: False
      experiment_name: 'metno'
      run_name: ${training.run_id}
  print_memory_summary: True

# Set clobber: False and specify the correct path and file in hardware to load graph, the path below is 
# only used for saving graphs.
graph:
  nodes:
    data: 
      node_builder:
        _target_: anemoi.graphs.nodes.ZarrDatasetNodes # options: ZarrDatasetNodes, NPZFileNodes
        dataset: ${dataloader.dataset}
      attributes:
        land_mask:
          _target_: anemoi.graphs.nodes.attributes.NonmissingZarrVariable
          variable: temperature_100
    hidden:
      node_builder:
        _target_: anemoi.graphs.nodes.LimitedAreaTriNodes # options: ZarrDatasetNodes, NPZFileNodes, TriNodes
        resolution: 4 # grid resolution for npz (o32, o48, ...)
        reference_node_name: ${graph.data}
        mask_attr_name: land_mask
  edges:
    # Encoder configuration
    - source_name: ${graph.data}
      target_name: ${graph.hidden}
      edge_builders:
      - _target_: anemoi.graphs.edges.CutOffEdges # options: KNNEdges, CutOffEdges
        cutoff_factor: 0.6 # only for cutoff method
        #target_mask_attr_name: land_mask
        source_mask_attr_name: land_mask
      attributes: ${graph.attributes.edges}
      # Processor configuration
    - source_name: ${graph.hidden}
      target_name: ${graph.hidden}
      edge_builders:
      - _target_: anemoi.graphs.edges.MultiScaleEdges
        x_hops: 1
      attributes: ${graph.attributes.edges}
      # Decoder configuration
    - source_name: ${graph.hidden}
      target_name: ${graph.data}
      edge_builders:
      - _target_: anemoi.graphs.edges.KNNEdges # options: KNNEdges, CutOffEdges
        num_nearest_neighbours: 3 # only for knn method
        target_mask_attr_name: land_mask
        #source_mask_attr_name: land_mask
      attributes: ${graph.attributes.edges}


    #node_builder:
    #  _target_: anemoi.graphs.nodes.NPZFileNodes
     # grid_definition_path: /lustre/storeB/project/fou/hi/foccus/mateuszm/anemoi/datasets/
    #  name: grid-o96.npz
    #  resolution: o96
    #attributes: 
    #  land_mask: 
    #    _target_: anemoi.graphs.nodes.attributes.NonmissingZarrVariable
    #    variable: temperature_0
#  hidden:
#    attributes: 
#      land_mask: 
#        _target_: anemoi.graphs.nodes.attributes.NonmissingZarrVariable
#        variable: temperature_0
  
#  edges:
  # A) Encoder connections
#  - source_name: data
#    target_name: hidden
#    edge_builders:
#    - _target_: anemoi.graphs.edges.CutOffEdges
 #     cutoff_factor: 0.7
  # B) Decoder connections
#  - source_name: hidden
#    target_name: data
#    edge_builders:
#    - _target_: anemoi.graphs.edges.KNNEdges
#      num_nearest_neighbours: 3
 # C) Processor connections
#  - source_name: hidden
#    target_name: hidden
#    edge_builders:
#    - _target_: anemoi.graphs.edges.MultiScaleEdges
#      x_hops: 1


graphs:
  output_path: ${hardware.paths.graph}${hardware.files.graph}
  save_graph_plots: False
  clobber: False
  #  attributes:
  #    land_mask:
  #      _target_: anemoi.graphs.nodes.attributes.NonmissingZarrVariable
  #      variable: temperature_0
  #nodes:
  #  data: 
  #    node_builder:
  #      _target_: anemoi.graphs.nodes.NPZFileNodes
  #      grid_definition_path: /lustre/storeB/project/fou/hi/foccus/mateuszm/anemoi/datasets/
  #      resolution: o96
  #  hidden:
  #    node_builder:
  #      _target_: anemoi.graphs.nodes.NPZFileNodes # options: ZarrDatasetNodes, NPZFileNodes, TriNodes
  #      grid_definition_path: /lustre/storeB/project/fou/hi/foccus/mateuszm/anemoi/datasets/
  #      resolution: o96 # grid resolution for npz (o32, o48, ...)
  #    attributes: ${graph.attributes.nodes}

data:
  resolution: o96
  frequency: 1h
  timestep: 1h

model:
  processor:
    num_layers: 8 # will make model shit, but ok for testing
  num_channels: 80
  trainable_parameters:
    data: 0
    hidden: 0
    data2hidden: 0
    hidden2data: 0
    hidden2hidden: 0 # GNN and GraphTransformer Processor only
#  bounding:
#    - {_target_: aifs.models.bounding.ReluBounding, variables: [tp]}

training:
  run_id: null #path to store the experiment in with output_base as root, null for random name, =fork_run_id to continue training in the same folder.
  fork_run_id: null #path to the experiment to fork from with output_base as root
  load_weights_only: False #loads entire model if False, loads only weights if True
  max_epochs: 1
  lr:
    rate: 5.0e-6
    iterations: 10000
    min: 8.0e-6

# nan values 3992676
# after inas pre-process: 3992676
# after mask_from_dataset: 8405778
# after imputer (no trimedge): 
# kjører med full imputer, men fortsatt problemer med grafen dersom man bruker mask_from_dataset